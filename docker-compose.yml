version: '3.8'

networks:
  main-network:
    driver: bridge

volumes:
  pg_data:
  mongo_data:

services:
  db:
    image: postgres:15
    hostname: db
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
    networks:
      - main-network

  mongo:
    image: mongo:6.0.1
    hostname: mongo
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    networks:
      - main-network

  mongo-express:
    image: mongo-express
    hostname: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_PORT: 27017
    networks:
      - main-network

  redis:
    image: redis:7.0.5-alpine
    hostname: redis
    restart: always
    ports:
      - "6380:6379"
    networks:
      - main-network

  web:
    build:
      context: ./
      dockerfile: ./dockerfiles/Dockerfile
    hostname: web
    restart: always
    ports:
      - "8005:8000"
    volumes:
      - ./:/app/
    env_file:
      - .env
    depends_on:
      - redis
      - db
      - worker
      - flower
    networks:
      - main-network
    command: bash -c "python /app/dockerfiles/wait_for_db.py && 
                      python manage.py makemigrations && 
                      python manage.py migrate && 
                      python manage.py runserver 0.0.0.0:8000"

  worker:
    build:
      context: ./
      dockerfile: ./dockerfiles/Dockerfile
    hostname: worker
    restart: always
    volumes:
      - ./:/app/
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - main-network
    entrypoint: celery
    command: -A celery_app.app worker --loglevel=debug --pool=solo

  flower:
    build:
      context: ./
      dockerfile: ./dockerfiles/Dockerfile
    hostname: flower
    restart: always
    ports:
      - "5555:5555"
    volumes:
      - ./:/app/
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - main-network
    entrypoint: celery
    command: -A celery_app.app flower --loglevel=debug --pool=solo